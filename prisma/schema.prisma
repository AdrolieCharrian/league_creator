generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model default_images {
  id_default_image Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  image            String?
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String           @unique
  emailVerified  DateTime?
  image          String?
  username       String?
  surname        String?
  description    String?
  password       String?
  favnumber      String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  accounts       Account[]
  Authenticator  Authenticator[]
  sessions       Session[]
  league_players league_players[]
  adminLeagues   leagues[]        @relation("UserLeaguesAdmin")
  invitations    Invitations[]
  //teams          teams[]          @relation("UserTeamsAdmin")
}

model leagues {
  id_league      Int              @id @default(autoincrement())
  name           String
  description    String?
  type           String?
  maxteams       Int              @default(16)
  adminId        String
  image          String?
  league_players league_players[]
  admin          User             @relation("UserLeaguesAdmin", fields: [adminId], references: [id])
  score          score[]
  sports_custom  sports_custom[]
  sports_league  sports_league[]
  teams          teams[]
  invitations    Invitations[]
}

model league_players {
  id_participation_league Int            @id @default(autoincrement())
  id_player               String
  id_league               Int
  leagues                 leagues        @relation(fields: [id_league], references: [id_league])
  user                    User           @relation(fields: [id_player], references: [id])
  players_team            players_team[]
}

model teams {
  id_team          Int            @id @default(autoincrement())
  name             String
  description      String?
  id_league        Int
  image            String?
  acronym          String
  // adminId          String
  matchesAsTeamOne matches[]      @relation("TeamOneRelation")
  matchesAsTeamTwo matches[]      @relation("TeamTwoRelation")
  // admin            User           @relation("UserTeamsAdmin", fields: [adminId], references: [id])
  players_team     players_team[]
  score            score[]
  leagues          leagues        @relation(fields: [id_league], references: [id_league])

  //@@index([id_league]) // Add index if needed, but not unique
}

model players_team {
  id_player_team Int            @id @default(autoincrement())
  id_team        Int
  id_player      Int
  league_players league_players @relation(fields: [id_player], references: [id_participation_league])
  teams          teams          @relation(fields: [id_team], references: [id_team])
}

model matches {
  id_match    Int      @id @default(autoincrement())
  id_team_one Int
  id_team_two Int
  match_date  DateTime
  sport       String
  winner      Int?
  loser       Int?
  draw        Boolean  @default(false)
  teamOne     teams    @relation("TeamOneRelation", fields: [id_team_one], references: [id_team])
  teamTwo     teams    @relation("TeamTwoRelation", fields: [id_team_two], references: [id_team])

  @@index([id_team_one], map: "idx_team_one")
  @@index([id_team_two], map: "idx_team_two")
}

model score {
  id_score  Int     @id @default(autoincrement())
  type      String?
  id_league Int
  id_team   Int
  matches   Int? 
  wins      Int?
  loses     Int?
  points    Int?
  draws     Int?    
  leagues   leagues @relation(fields: [id_league], references: [id_league])
  teams     teams   @relation(fields: [id_team], references: [id_team])
}

model sports {
  id_sport      Int             @id @default(autoincrement())
  name          String
  description   String?
  rules         String
  num_players   Int
  sports_league sports_league[] @relation("SportsToLeague")
}

model sports_custom {
  id_sport_custom Int             @id @default(autoincrement())
  name            String
  description     String?
  rules           String
  num_players     Int
  id_league       Int
  leagues         leagues         @relation(fields: [id_league], references: [id_league])
  sports_league   sports_league[] @relation("SportsCustomToLeague")
}

model sports_league {
  id_sport_league Int            @id @default(autoincrement())
  id_league       Int
  id_sport        Int?
  id_sport_custom Int?
  leagues         leagues        @relation(fields: [id_league], references: [id_league])
  sports_custom   sports_custom? @relation("SportsCustomToLeague", fields: [id_sport_custom], references: [id_sport_custom])
  sports          sports?        @relation("SportsToLeague", fields: [id_sport], references: [id_sport])

  @@unique([id_league, id_sport])
  @@unique([id_league, id_sport_custom])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Invitations {
  id_invitation Int     @id @default(autoincrement())
  id_league     Int
  id_user       String
  leagues       leagues @relation(fields: [id_league], references: [id_league])
  user          User    @relation(fields: [id_user], references: [id])
}
